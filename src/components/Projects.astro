---
import projectsDataJson from "../data/projectsData.json";
---

<section id="proyectos" class="flex flex-col items-center justify-center mt-30">
    <p class="text-4xl py-1 font-extrabold text-center font-[Poppins_800] bg-gradient-to-r from-(--color-accent) to-(--color-text-secondary) dark:to-white inline-block text-transparent bg-clip-text">Proyectos</p>
    
    <!-- Filtro de categorías -->
    <div class="flex flex-wrap gap-4 justify-center mt-6 mb-8">
        {projectsDataJson.data.map((categoria) => (
            <button 
                class="category-btn px-4 py-2 rounded-lg bg-(--color-background-secondary) hover:bg-(--color-accent) hover:text-white text-(--color-text-secondary) transition-colors duration-300 font-medium"
                data-categoria={categoria.categoria}
            >
                {categoria.categoria}
            </button>
        ))}
    </div>
    
    <!-- Contenedor de proyectos -->
    <div class="w-full max-w-6xl mx-auto px-4">
        {projectsDataJson.data.map((categoria) => (
            <div class="categoria-container hidden" data-categoria={categoria.categoria}>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {categoria.proyectos.map((proyecto) => (
                        <div 
                            class="project-card bg-(--color-background-secondary) rounded-xl overflow-hidden shadow-md hover:shadow-lg transition-shadow duration-300 cursor-pointer transition-transform duration-300 hover:scale-105"
                            data-proyecto-id={proyecto.id}
                        >
                            <div class="aspect-video overflow-hidden">
                                <img 
                                    src={proyecto.imagen} 
                                    alt={proyecto.nombre} 
                                    class="w-full h-full object-cover "
                                />
                            </div>
                            <div class="p-5">
                                <p class="text-sm text-(--color-text-secondary) dark:text-gray-300">Click aquí para más detalles</p>
                                <h3 class="text-xl font-bold text-(--color-text-secondary) dark:text-white mb-2">{proyecto.nombre}</h3>
                                
                            </div>
                        </div>
                    ))}
                </div>
            </div>
        ))}
    </div>
    
    <!-- Popup / Modal para detalles del proyecto -->
    <div id="project-modal" class="fixed inset-0 bg-black/70 flex items-center justify-center z-50 hidden">
        <div class="bg-(--color-background) max-w-4xl w-full max-h-[90vh] overflow-y-auto rounded-xl p-6 relative">
            <button id="close-modal" class="absolute top-4 right-4 text-gray-500 hover:text-gray-800 dark:hover:text-white">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
            
            <div id="modal-content" class="mt-2">
                <!-- Contenido dinámico del proyecto seleccionado -->
            </div>
        </div>
    </div>
</section>

<script define:vars={{ projectsDataJson }} >
    // Cargar Swiper dinámicamente
    function loadScript(src) {
        return new Promise((resolve, reject) => {
            const script = document.createElement('script');
            script.src = src;
            script.onload = () => resolve();
            script.onerror = () => reject(new Error(`Error al cargar ${src}`));
            document.head.appendChild(script);
        });
    }

    // Usar projectsDataJson pasado desde el componente
    //const projectsDataJson = JSON.parse(document.currentScript.getAttribute('data-projects'));
    const projectsData = projectsDataJson.data;
    
    document.addEventListener("DOMContentLoaded", async () => {
        // Cargar Swiper si no está disponible
        if (typeof Swiper === 'undefined') {
            try {
                await loadScript('https://cdn.jsdelivr.net/npm/swiper@10/swiper-bundle.min.js');
                console.log('Swiper cargado dinámicamente');
            } catch (error) {
                console.error('Error al cargar Swiper:', error);
            }
        }
        
        // Manejo de botones de categoría
        const categoryButtons = document.querySelectorAll(".category-btn");
        categoryButtons.forEach(button => {
            button.addEventListener("click", () => {
                // Actualizar estilo de botones
                categoryButtons.forEach(btn => {
                    btn.classList.remove("bg-(--color-accent)", "text-white");
                    btn.classList.add("bg-(--color-background-secondary)", "text-(--color-text-secondary)");
                });
                button.classList.remove("bg-(--color-background-secondary)", "text-(--color-text-secondary)");
                button.classList.add("bg-(--color-accent)", "text-white");
                
                // Mostrar proyectos de la categoría seleccionada
                const selectedCategory = button.dataset.categoria;
                const categoryContainers = document.querySelectorAll(".categoria-container");
                
                categoryContainers.forEach(container => {
                    if (container.dataset.categoria === selectedCategory) {
                        container.classList.remove("hidden");
                    } else {
                        container.classList.add("hidden");
                    }
                });
            });
        });
        
        // Manejo de tarjetas de proyecto
        const projectCards = document.querySelectorAll(".project-card");
        const projectModal = document.getElementById("project-modal");
        const modalContent = document.getElementById("modal-content");
        const closeModal = document.getElementById("close-modal");
        
        projectCards.forEach(card => {
            card.addEventListener("click", () => {
                const projectId = parseInt(card.dataset.proyectoId);
                const selectedProject = findProject(projectId);
                
                if (selectedProject) {
                    renderProjectDetails(selectedProject);
                    projectModal.classList.remove("hidden");
                    document.body.style.overflow = "hidden"; // Prevenir scroll en el fondo
                }
            });
        });

        // Seleccionar específicamente la categoría "Desarrollo Web"
        const webDevCategory = document.querySelector(".category-btn[data-categoria='Desarrollo Web']");
        
        // Si existe la categoría "Desarrollo Web", seleccionarla, si no, seleccionar la primera
        if (webDevCategory) {
            webDevCategory.click();
        } else {
            // Fallback: seleccionar la primera categoría si no se encuentra "Desarrollo Web"
            const firstCategory = document.querySelector(".category-btn");
            if (firstCategory) {
                firstCategory.click();
            }
        }
        
        // Cerrar modal
        closeModal.addEventListener("click", () => {
            projectModal.classList.add("hidden");
            document.body.style.overflow = "auto";
        });
        
        // Cerrar modal al hacer clic fuera del contenido
        projectModal.addEventListener("click", (e) => {
            if (e.target === projectModal) {
                projectModal.classList.add("hidden");
                document.body.style.overflow = "auto";
            }
        });
        
        // Función para encontrar un proyecto por ID
        function findProject(projectId) {
            for (const category of projectsData) {
                const project = category.proyectos.find(p => p.id === projectId);
                if (project) return project;
            }
            return null;
        }
        
        // Función para renderizar los detalles del proyecto en el modal
        function renderProjectDetails(project) {
            const tecnologiasIcons = project.tecnologias.map(tech => {
                if(tech === "typescript") {
                    return `<i class="devicon-typescript-plain text-5xl content-center mx-2" title="javascript"></i>`;
                }
                const iconClass = tech === 'vuejs' || tech === "postgresql" || tech === "docker" || tech === "go" ? 'text-6xl content-center' : 'text-8xl';
                return `<i class="devicon-${tech}-plain-wordmark ${iconClass} mx-2" title="${tech}"></i>`;
            }).join('');
            
            // Galería de imágenes
            const imageGallery = project.imagenes.map(img => 
                `<div class="swiper-slide">
                    <img src="${img}" alt="${project.nombre}" class="w-full h-auto rounded-lg">
                </div>`
            ).join('');
            
            modalContent.innerHTML = `
                <h2 class="text-2xl font-bold text-(--color-text-secondary) dark:text-white mb-4">${project.nombre}</h2>
                
                <div class="swiper mb-6">
                    <div class="swiper-wrapper">
                        ${imageGallery}
                    </div>
                    <div class="swiper-pagination mt-3"></div>
                    <div class="swiper-button-prev"></div>
                    <div class="swiper-button-next"></div>
                </div>
                
                <div class="mb-6">
                    <h3 class="text-xl font-semibold text-(--color-text-secondary) dark:text-white mb-2">Descripción</h3>
                    <p class="text-(--color-text-secondary) dark:text-gray-300">${project.descripcionLarga}</p>
                </div>
                
                <div class="mb-6">
                    <h3 class="text-xl font-semibold text-(--color-text-secondary) dark:text-white mb-2">Tecnologías</h3>
                    <div class="flex flex-wrap justify-start">
                        ${tecnologiasIcons}
                    </div>
                </div>
                
                <div class="text-center mt-6">
                    ${project.repositorio ? `
                        <a href="${project.repositorio}" target="_blank" class="inline-block px-6 py-3 bg-(--color-accent) text-white rounded-lg font-medium hover:bg-opacity-90 transition-colors">
                            Ver Repositorio
                        </a>
                    ` : `
                        <a target="_blank" class="inline-block px-6 py-3 bg-(--color-accent) text-white rounded-lg font-medium hover:bg-opacity-90 transition-colors">
                            Repositorio privado
                        </a>
                    `}
                </div>
            `;
            
           
            setTimeout(() => {
                if (typeof Swiper !== 'undefined') {
                    new Swiper('.swiper', {
                        pagination: {
                            el: '.swiper-pagination',
                            clickable: true
                        },
                        loop: true,
                        navigation: {
                            nextEl: '.swiper-button-next',
                            prevEl: '.swiper-button-prev',
                        },
                    });
                } else {
                    console.error('Swiper no pudo ser cargado');
                }
            }, 100);
        }
    });
</script>

<script define:vars={{ projectsDataJson }} data-projects={JSON.stringify(projectsDataJson)}>
    // Este script solo sirve para pasar los datos al script principal
</script>